"use strict";var $=document.querySelector.bind(document),$$=document.querySelectorAll.bind(document),MuteUtils={eventAdder:function(t,e,n){for(var r=$$(t)||[],o=r.length,c=0;c<o;c++)r[c].addEventListener(e,n);return r},extendObject:function(t,e){return Object.keys(e).forEach(function(n){t[n]=e[n]}),t},getLocation:function(t){var e=t.getBoundingClientRect();return extendObject(e,{width:e.right-e.left,height:e.bottom-e.top}),e},nodeListToArray:function(t){return Array.prototype.slice.call(t)}};
"use strict";function getMuteVideos(){return MuteUtils.nodeListToArray($$("video"))}function muteVideoElement(e){e.volume=0,setTimeout(function(){e.volume=0},500),setTimeout(function(){e.volume=0},1e3)}function stopVideoElement(e){muteVideoElement(e),setTimeout(function(){e.pause(),e.volume=1},500)}function settingsToActions(e){e.willRun>-1||getMuteVideos().forEach(function(t){switch(e.muteMode){case 0:muteVideoElement(t);break;case 1:stopVideoElement(t)}})}function processDOM(e,t,o){var n=void 0,i=void 0;void 0!==e&&void 0!==t&&void 0!==o?(n=e.exemptDomains instanceof Array&&e.exemptDomains.indexOf(document.domain),i=e.muteMode,settingsToActions({willRun:n,muteMode:i})):chrome.storage.sync.get({muteMode:0,exemptDomains:[]},function(e){n=e.exemptDomains instanceof Array&&e.exemptDomains.indexOf(document.domain),i=e.muteMode,settingsToActions({willRun:n,muteMode:i})})}document.addEventListener("DOMContentLoaded",processDOM),chrome.runtime.onMessage.addListener(processDOM);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIiwiaW5qZWN0ZWQuanMiXSwibmFtZXMiOlsiJCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImJpbmQiLCIkJCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJNdXRlVXRpbHMiLCJzZWxlY3RvciIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwidExlbmd0aCIsInRhcmdldHMiLCJldmVudEFkZGVyIiwibGVuZ3RoIiwiaSIsImFkZEV2ZW50TGlzdGVuZXIiLCJleHRlbmRPYmplY3QiLCJvYmoiLCJlbCIsImZvckVhY2giLCJrZXkiLCJnZXRMb2NhdGlvbiIsImJvdW5kaW5nQ2xpZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJ3aWR0aCIsInJpZ2h0Iiwibm9kZUxpc3RUb0FycmF5Iiwibm9kZUxpc3QiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImdldE11dGVWaWRlb3MiLCJtdXRlVmlkZW9FbGVtZW50Iiwidm9sdW1lIiwic2V0VGltZW91dCIsInN0b3BWaWRlb0VsZW1lbnQiLCJzZXR0aW5nc1RvQWN0aW9ucyIsIm9wdGlvbnMiLCJ3aWxsUnVuIiwibXV0ZU1vZGUiLCJwcm9jZXNzRE9NIiwicmVxdWVzdCIsInNlbmRlciIsInJlc3BvbnNlIiwidW5kZWZpbmVkIiwiZXhlbXB0RG9tYWlucyIsImluZGV4T2YiLCJkb21haW4iLCJjaHJvbWUiLCJzdG9yYWdlIiwic3luYyIsImdldCIsInJlY29yZCIsInJ1bnRpbWUiLCJvbk1lc3NhZ2UiLCJhZGRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IllBQUEsSUFBSUEsR0FBSUMsU0FBU0MsY0FBY0MsS0FBS0YsVUFDaENHLEdBQUtILFNBQVNJLGlCQUFpQkYsS0FBS0YsVUFBcENHLFdBRUFFLFdBQVksU0FBQUMsRUFBQUMsRUFBQUMsR0FHUixJQUNJQyxHQURBQyxHQUFVUCxHQUFHRyxPQURyQkssRUFBWUQsRUFBQUUsT0FFSkgsRUFBQUEsRUFBVUMsRUFBQUEsRUFEZEcsSUFJSUgsRUFBUUcsR0FBR0MsaUJBQWlCUCxFQUFXQyxFQUMxQyxPQUFBRSxJQUdKSyxhQVhXLFNBQUFDLEVBQUFDLEdBaUJQLE1BSkxGLFFBQUFBLEtBQWNFLEdBQUFDLFFBQUEsU0FBU0YsR0FHZkEsRUFBSUcsR0FBT0YsRUFBR0UsS0FEbEJILEdBUUpJLFlBQWEsU0FBU0gsR0FFbEIsR0FBSUksR0FBcUJKLEVBQUdLLHVCQU81QixPQUxBUCxjQUFhTSxHQUFiTixNQUFBQSxFQUFhTSxNQUFvQkEsRUFBQUUsS0FDN0JDLE9BQU9ILEVBQW1CSSxPQUFRSixFQUFtQkUsTUFJbERGLEdBSVhLLGdCQUFpQixTQUFBQyxHQUNiLE1BQU9DLE9BQU1DLFVBQVVDLE1BQU1DLEtBQUtKO1lDeEMxQyxTQUFTSyxpQkFDTCxNQUFPM0IsV0FBVXFCLGdCQUFnQnZCLEdBQUcsVUFDdkMsUUFBQThCLGtCQUFBaEIsR0FHR0EsRUFBR2lCLE9BQVMsRUFEaEJDLFdBQVNGLFdBQ0ZDLEVBQUFBLE9BQUgsR0FDQUMsS0FDSWxCLFdBQUdpQixXQUNKakIsRUFGSGlCLE9BQUEsR0FHQUMsS0FHSCxRQUFBQyxrQkFBQW5CLEdBR0dnQixpQkFBaUJoQixHQURyQmtCLFdBQVNDLFdBQ0xILEVBQUFBLFFBQ0FFLEVBQUFBLE9BQVcsR0FDUGxCLEtBR1AsUUFBQW9CLG1CQUFBQyxHQUdPQSxFQUFRQyxTQUFVLEdBQXRCUCxnQkFBWU8sUUFBWixTQUFBdEIsR0FHSSxPQUFRcUIsRUFBUUUsVUFEcEJSLElBQUFBLEdBQ1lNLGlCQUFSckIsRUFDSSxNQUNJZ0IsS0FBQUEsR0FDQUcsaUJBQUFuQixNQU1mLFFBQUF3QixZQUFBQyxFQUFBQyxFQUFBQyxHQUdHLEdBQUlMLEdBQUFBLE9BRFJDLEVBQUFBLE1BRVFBLFVBQUFBLEdBQUpLLFNBQUFGLEdBQUFFLFNBQUFELEdBR0lMLEVBQVVHLEVBQVFJLHdCQUF5QmxCLFFBQVNjLEVBQVFJLGNBQWNDLFFBQVEvQyxTQUFTZ0QsUUFEM0ZOLEVBQUFBLEVBQVlHLFNBRVpMLG1CQUdJRCxRQUFTQSxFQURiRixTQUFBQSxLQUFrQlksT0FBbEJDLFFBQUFDLEtBQUFDLEtBSUdaLFNBQUEsRUFDSFMsa0JBQ0lULFNBQUFBLEdBQ0FNLEVBQUFBLEVBQWVBLHdCQUFBbEIsUUFBQXlCLEVBQUFQLGNBQUFDLFFBQUEvQyxTQUFBZ0QsUUFDaEJSLEVBQUFhLEVBQVViLFNBRVRBLG1CQUdJRCxRQUFTQSxFQURiRixTQUFBQSxNQVNackMsU0FBQWMsaUJBQUEsbUJBQUEyQixZQUdBUSxPQUFBSyxRQUFBQyxVQUFBQyxZQUFBZiIsImZpbGUiOiJqcy9pbmplY3RlZC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IuYmluZChkb2N1bWVudCksXG4gICAgJCQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsLmJpbmQoZG9jdW1lbnQpO1xuXG52YXIgTXV0ZVV0aWxzID0ge1xuXG4gICAgZXZlbnRBZGRlcjogZnVuY3Rpb24oc2VsZWN0b3IsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHRhcmdldHMgPSAkJChzZWxlY3RvcikgfHwgW10sXG4gICAgICAgICAgICB0TGVuZ3RoID0gdGFyZ2V0cy5sZW5ndGg7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRhcmdldHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRzO1xuICAgIH0sXG5cbiAgICBleHRlbmRPYmplY3Q6IGZ1bmN0aW9uKG9iaiwgZWwpIHtcblxuICAgICAgICBPYmplY3Qua2V5cyhlbCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gZWxba2V5XTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG9iajtcblxuICAgIH0sXG5cbiAgICBnZXRMb2NhdGlvbjogZnVuY3Rpb24oZWwpIHtcblxuICAgICAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgZXh0ZW5kT2JqZWN0KGJvdW5kaW5nQ2xpZW50UmVjdCwge1xuICAgICAgICAgICAgd2lkdGg6IGJvdW5kaW5nQ2xpZW50UmVjdC5yaWdodCAtIGJvdW5kaW5nQ2xpZW50UmVjdC5sZWZ0LFxuICAgICAgICAgICAgaGVpZ2h0OiBib3VuZGluZ0NsaWVudFJlY3QuYm90dG9tIC0gYm91bmRpbmdDbGllbnRSZWN0LnRvcFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYm91bmRpbmdDbGllbnRSZWN0O1xuXG4gICAgfSxcblxuICAgIG5vZGVMaXN0VG9BcnJheTogZnVuY3Rpb24obm9kZUxpc3QpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG5vZGVMaXN0KTtcbiAgICB9XG5cbn07XG4iLCJmdW5jdGlvbiBnZXRNdXRlVmlkZW9zKCkge1xuICAgIHJldHVybiBNdXRlVXRpbHMubm9kZUxpc3RUb0FycmF5KCQkKFwidmlkZW9cIikpO1xufVxuXG5mdW5jdGlvbiBtdXRlVmlkZW9FbGVtZW50KGVsKSB7XG4gICAgZWwudm9sdW1lID0gMDtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZWwudm9sdW1lID0gMDtcbiAgICB9LCA1MDApO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBlbC52b2x1bWUgPSAwO1xuICAgIH0sIDEwMDApO1xufVxuXG5mdW5jdGlvbiBzdG9wVmlkZW9FbGVtZW50KGVsKSB7XG4gICAgbXV0ZVZpZGVvRWxlbWVudChlbCk7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGVsLnBhdXNlKCk7XG4gICAgICAgIGVsLnZvbHVtZSA9IDE7XG4gICAgfSwgNTAwKTtcbn1cblxuZnVuY3Rpb24gc2V0dGluZ3NUb0FjdGlvbnMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLndpbGxSdW4gPiAtMSkgcmV0dXJuO1xuXG4gICAgZ2V0TXV0ZVZpZGVvcygpLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMubXV0ZU1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBtdXRlVmlkZW9FbGVtZW50KGVsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBzdG9wVmlkZW9FbGVtZW50KGVsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzRE9NKHJlcXVlc3QsIHNlbmRlciwgcmVzcG9uc2UpIHtcbiAgICBsZXQgd2lsbFJ1bjtcbiAgICBsZXQgbXV0ZU1vZGU7XG5cbiAgICBpZiAocmVxdWVzdCAhPT0gdW5kZWZpbmVkICYmIHNlbmRlciAhPT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgd2lsbFJ1biA9IHJlcXVlc3QuZXhlbXB0RG9tYWlucyBpbnN0YW5jZW9mIEFycmF5ICYmIHJlcXVlc3QuZXhlbXB0RG9tYWlucy5pbmRleE9mKGRvY3VtZW50LmRvbWFpbik7XG4gICAgICAgIG11dGVNb2RlID0gcmVxdWVzdC5tdXRlTW9kZTtcblxuICAgICAgICBzZXR0aW5nc1RvQWN0aW9ucyh7XG4gICAgICAgICAgICB3aWxsUnVuOiB3aWxsUnVuLFxuICAgICAgICAgICAgbXV0ZU1vZGU6IG11dGVNb2RlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KHtcbiAgICAgICAgICAgIG11dGVNb2RlOiAwLFxuICAgICAgICAgICAgZXhlbXB0RG9tYWluczogW11cbiAgICAgICAgfSwgcmVjb3JkID0+IHtcbiAgICAgICAgICAgIHdpbGxSdW4gPSByZWNvcmQuZXhlbXB0RG9tYWlucyBpbnN0YW5jZW9mIEFycmF5ICYmIHJlY29yZC5leGVtcHREb21haW5zLmluZGV4T2YoZG9jdW1lbnQuZG9tYWluKTtcbiAgICAgICAgICAgIG11dGVNb2RlID0gcmVjb3JkLm11dGVNb2RlO1xuXG4gICAgICAgICAgICBzZXR0aW5nc1RvQWN0aW9ucyh7XG4gICAgICAgICAgICAgICAgd2lsbFJ1bjogd2lsbFJ1bixcbiAgICAgICAgICAgICAgICBtdXRlTW9kZTogbXV0ZU1vZGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG59XG5cbi8vIHdhaXQgZm9yIERPTSB0byBiZSBwYXJzZWRcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBwcm9jZXNzRE9NKTtcblxuLy8gYXdhaXQgbWVzc2FnZSBmcm9tIG1haW4gdGhyZWFkIG9mIHBvcHVwXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIocHJvY2Vzc0RPTSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
