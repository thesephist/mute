"use strict";var $=document.querySelector.bind(document),$$=document.querySelectorAll.bind(document),MuteUtils={eventAdder:function(t,e,n){for(var r=$$(t)||[],o=r.length,c=0;c<o;c++)r[c].addEventListener(e,n);return r},extendObject:function(t,e){return Object.keys(e).forEach(function(n){t[n]=e[n]}),t},getLocation:function(t){var e=t.getBoundingClientRect();return extendObject(e,{width:e.right-e.left,height:e.bottom-e.top}),e},nodeListToArray:function(t){return Array.prototype.slice.call(t)}};
"use strict";var Mute={muteMode:0,exemptDomains:[],currentDomain:null,el:{excludeOnButton:$(".excluder .on"),excludeOffButton:$(".excluder .off"),muteButton:$(".muter .mute"),stopButton:$(".muter .stop")},ev:{"click .excluder .on":"excludeSite","click .excluder .off":"includeSite","click .muter .mute":"setMute","click .muter .stop":"setStop"},f:{setDomainName:function(e){var t=void 0;chrome.tabs.query({active:!0,lastFocusedWindow:!0},function(u){t=u[0].url;var n=document.createElement("a");n.setAttribute("href",t),Mute.currentDomain=n.hostname,e&&e()})},toast:function(e){},excludeSite:function(e){Mute.currentDomain&&Mute.exemptDomains.indexOf(Mute.currentDomain)==-1&&Mute.exemptDomains.push(Mute.currentDomain),this.setSettings(),this.render()},includeSite:function(e){if(Mute.currentDomain){var t=Mute.exemptDomains.indexOf(Mute.currentDomain);t>-1&&Mute.exemptDomains.splice(t,1),this.setSettings(),this.render()}},setMute:function(e){Mute.muteMode=0,this.setSettings(),this.render()},setStop:function(e){Mute.muteMode=1,this.setSettings(),this.render()},render:function(){switch(Mute.muteMode){case 0:Mute.el.stopButton.classList.remove("active"),Mute.el.muteButton.classList.add("active");break;case 1:Mute.el.muteButton.classList.remove("active"),Mute.el.stopButton.classList.add("active")}Mute.currentDomain&&Mute.exemptDomains.indexOf(Mute.currentDomain)>-1?(Mute.el.excludeOffButton.classList.remove("active"),Mute.el.excludeOnButton.classList.add("active")):(Mute.el.excludeOnButton.classList.remove("active"),Mute.el.excludeOffButton.classList.add("active"))},getSettings:function(e){return chrome.storage.sync.get({muteMode:0,exemptDomains:[]},function(e){Mute.muteMode=e.muteMode,Mute.exemptDomains=e.exemptDomains}),e&&e(),{muteMode:Mute.muteMode,exemptDomains:Mute.exemptDomains}},setSettings:function(e){chrome.storage.sync.set({muteMode:Mute.muteMode,exemptDomains:Mute.exemptDomains},function(){this.toast("Saved!")}.bind(this)),e&&e(),console.log(Mute.muteMode,Mute.exemptDomains)},sendMessage:function(e){var t=this;chrome.tabs.query({active:!0,currentWindow:!0},function(e){chrome.tabs.sendMessage(e[0].id,t.getSettings())})}}};Mute.init=function(){Object.keys(Mute.ev).forEach(function(e){var t=e.split(" ")[0],u=e.split(" ").splice(1).join(" "),n=Mute.f[Mute.ev[e]].bind(Mute.f);MuteUtils.eventAdder(u,t,n)}),Mute.f.getSettings(),Mute.f.setDomainName(),Mute.f.render(),Mute.f.sendMessage(),console.info("Mute initialized")},Mute.init();
//# sourceMappingURL=data:application/json;base64,
